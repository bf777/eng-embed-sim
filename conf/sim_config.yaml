---
# NOTE: You must include units with all quantities that are not unitless. Units will be automatically converted to SI. 
# pod reference point: 
# - to bottom of frame: 82.5mm
# - from bottom of frame to bottom of he, mounted (no shims, so give or take a bit -- probably 1/10", or +~2.54mm): 62.4mm
# - from reference to bottom of HE = 82.5 + 62.4 + 2.54mm = 147.44 (reference to bottom of hover engines)
# - sensor_laser_opto: normal readings at 6mm height (?) were at about 18.3, +25mm built-in offset, so 43.3mm - 6mm = 37.3mm distance above bottom of HE (approx)
#     ref to bottom of he (147.44) - 37.3 = 110.14 (reference to bottom of laser opto sensor ** Remember to add in the built-in 25mm offset for calculations **)

sim:
    fixed_timestep: 1000 usec
    # Interval to recalculate time dialation (real time vs sim time) for the FCU timers
    time_dialation_interval: 100msec
    fcu:
        # @todo: make this work
        enabled: True
        # DLL path relative to the top level of the simulator. Typically you would have eng-software-pod checked out in a sibling directory of this (eng-embed-sim)
        dll_path: "../eng-software-pod/APPLICATIONS/PROJECT_CODE/DLLS/LDLL174__RLOOP__LCCM655/bin/Debug/"  # Relative to top level of this repo (../)
        dll_filename: "LDLL174__RLOOP__LCCM655.dll"

    networking:
        # Use force_loopback to send and receive everything on 127.0.0.1
        force_loopback: True
        nodes:
            spacex:
                # @todo: get the correct values for where we need to send the spacex packet (ground station?)
                name: SpaceX Comms
                ip: 192.168.0.100            
                tx_port: 3000
                rx_port: 3000
                MAC: 00:26:80:01:00:00
                handler: SpacexNode
            flight_control: 
                name: Flight Control
                handler: FlightControlNode
                ip: 192.168.0.100
                tx_port: 9100
                rx_port: 8100
                MAC: 00:26:80:01:00:00
            
            #power_fwd: 
            #    name: Power FWD
            #    handler: PowerFwdNode
            #    ip: 192.168.0.110
            #    tx_port: 9110
            #    rx_port: 9110
            #    MAC: 00:26:80:01:00:01
            #power_aft:  
            #    name: Power AFT
            #    handler: PowerAftNode
            #    ip: 192.168.0.111
            #    tx_port: 9111
            #    rx_port: 9111
            #    MAC: 00:26:80:01:00:02
            #landing_gear:  
            #    name: Landing Gear
            #    handler: LandingGearNode
            #    ip: 192.168.0.120
            #    tx_port: 9120
            #    rx_port: 9120
            #    MAC: 00:26:80:01:00:03
            #gimbal_control:  
            #    name: Gimbal Control
            #    handler: GimbalControlNode
            #    ip: 192.168.0.130
            #    tx_port: 9130
            #    rx_port: 9130
            #    MAC: 00:26:80:01:00:04
                
    # Working directory for output files, relative to the cwd from which the simulator was run. Can be overridden by SimRunner.
    working_dir: data
    pusher:
        max_velocity: 150.0 m/s
        push_end_position: 475m  # NOTE: This is where the push will stop regardless of speed -- @todo: work this into the pusher
        push_force: 8000 N
        coast_time_usec: 1000000 usec
        brake_force: -8000 N   # Doesn't really matter, just needs to be big and negative

    track:
        length: 1260 m
        pumpdown_pressure: .125 psi

        # Pressures to test: np.linspace(0.125, 12.5, 4)
        air_pressure: .125 psi
        air_temperature: 72.0
        air_specific_gas_constant: 287.05 J/(kg*degK)

        # Reflective strips
        # Enable/disable the reflective strips (e.g. an outdoor track will likely not have strips; the tube will)
        enable_reflective_strips: True
        # Enable/disable the 500' and 1000' strip patterns
        enable_strip_patterns: True
        reflective_strip_width: 4in
        reflective_pattern_interval: 100ft
        reflective_pattern_spacing: 4in

        # Track gaps
        track_gap_width: 5mm
        track_gap_interval: 2m
        
    sensors:
        # A special sensor for pod data (see sensor.py, PodSensor)
        pod:
            filename: pod.csv
        laser_opto:
            - he_height_offset: 12.3mm
              sampling_rate: 250 Hz
              noise:
                  scale: .0001
                  center: 0.0
            - he_height_offset: 14.0 mm
              sampling_rate: 250 Hz
              noise:
                  scale: .0001
                  center: 0.0        
        accel:
            - sampling_rate: 100 Hz
              noise: {scale: 0.0, center: 0.0}
            - sampling_rate: 100 Hz
              noise: {scale: 0.0, center: 0.0}

        laser_contrast:
            # Note: each entry in the following list represents a config for a laser contrast sensor
            # RDA: x offsets measured 1/19/2016
            - pod_x_offset: -177 mm
              noise: {scale: 0.0, center: 0.0}
            - pod_x_offset: -827 mm
              noise: {scale: 0.0, center: 0.0}
            - pod_x_offset: -1487 mm
              noise: {scale: 0.0, center: 0.0}

    pod:
        mass: 350 kg
        position: 0.0 m  # from start of track
        velocity: 0.0 m/s
        acceleration: 0.0 m/s^2
        forces:
            aero:
                # Put aero drag/lift force constants and configuration here
                # @see https://rloop.slack.com/archives/eng-numsim/p1483130166001034 and https://rloop.slack.com/archives/eng-numsim/p1483130642001039
                drag_area: 1.14 m^2
                drag_coefficient: 1.1849
                air_density: 0.100098 kg/m^3
            brakes:
                # Put brake drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
            gimbals:
                # Put gimbal drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
            hover_engines:
                # Put hover engine drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
                lift:
                    a: 1142
                    b: -99.144
                    c: 0.089501
                    k: 0.00932005
            landing_gear:
                # Put landing gear drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
            lateral_stability:
                # Put lateral stability drag/lift force constants and configuration here. Include units! (any provided units will be converted to SI)
                damping_coefficient: 0.01 N*s/m  # 0.01 is a placeholder @todo: update to actual value
        landing_gear:
            # Heights relative to the bottoms of the hover engines
            min_height: 6mm
            max_height: 16mm
            initial_height: 6mm
            down_speed_loaded: something
            down_speed_unloaded: something
            up_speed_loaded: something
            down_speed_loaded: something
        sensors:
            CONTRAST_1: 
                pod_ref_x_offset: -0.5m
            CONTRAST_2:
                pod_ref_x_offset: -0.7m
            CONTRAST_3:
                pod_ref_x_offset: -0.9m                
            LASER_DIST:
                pod_ref_x_offset: 0.8m    
            ACCEL_1:
                # The accelerometer is not going to be perfectly zeroed, so let's give it a bit of an initial error that will need to be mathematically corrected
                mount_roll:
                mount_pitch: 
                mount_yaw:  
        actuators:
            lgu_actuators:  "Should be a list or something"
        physical:
            nose_tip_offset: 1.0m
            pusher_plate_offset: -2.9m
        hover_engines:
            # @see pod.py -- these are for a single hover engine drag based on velocity and height 
            mu_naught: 4 *pi 
            z_naught: 
            mag_dipole_strength:
            mag_permeability: 
            material_thickness: 0.5 in
            material_density: 
            # With this and velocity, we can get F_lift and F_drag? 
        brakes:
            - initial_gap: 25.4mm
              maximum_gap: 25.4mm
              minimum_gap: 2.5mm
              gap_close_min_time: 2.5s
              # Set the min and max values for the MLP. In theory this is 0-4096, but it's more like 300-3000 in practice.
              # Note that the raw min and raw max will be different per brake due to differences in MLP mounting
              mlp_raw_min: 300  
              mlp_raw_max: 3000
            - initial_gap: 25.4mm
              maximum_gap: 25.4mm
              minimum_gap: 2.5mm
              gap_close_min_time: 2.5s
              # Set the min and max values for the MLP. In theory this is 0-4096, but it's more like 300-3000 in practice.
              # Note that the raw min and raw max will be different per brake due to differences in MLP mounting
              mlp_raw_min: 300
              mlp_raw_max: 3000

        
